//
//  ImageWorker.swift
//  imageVIP
//
//  Created by Manan Vij on 16/08/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ImageWorker
{
    private let baseURL = "https://api.unsplash.com/photos?client_id=ugp5ckBK-WsQql7_3QE85R3s5318nQXEWIjo0KNZ_dk"
    private var imageUrlArray: [URL]?
    private var isSucess = false
    private var completionMsg = ""
    
    typealias successHandler = (_ success: Bool, _ message: String, _ url: [URLs]) -> Void

    func doSomeWork(completionHandler: @escaping successHandler)
    {
        let url = URL(string: baseURL)
        if let url = URL(string: baseURL) {
            let session = URLSession(configuration: .default)
            let task = session.dataTask(with: url) {(data, response, error) in
                if error != nil {
                    self.completionMsg = "Error while creating task: \(error!)"
                    print("Error while creating task: \(error!)")
                    return
                }
                if let safeData = data {
                    if let parsedData = self.parseData(imageData: safeData) {
                        self.isSucess = true
                        self.completionMsg = "success"
                        completionHandler(self.isSucess, self.completionMsg, parsedData.url)
                    }
                }
            }
            task.resume()
        }
    }
    
    private func parseData(imageData: Data) -> Image.ImageAPI.ViewModel? {
        let decoder = JSONDecoder()
        do {
            let decodedData = try decoder.decode([ImageModel].self, from: imageData)
            let imageObj = decodedData.map{$0.urls}
            let image = Image.ImageAPI.ViewModel(url: imageObj)
            return image
        } catch {
            completionMsg = "Error while parsing data: \(error)"
            print(error)
            return nil
        }
    }
}
